/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        if(head == NULL || head -> next == NULL)
            return NULL;
        
        int flag = false;
        ListNode *slow = head, *fast = head;
        
        while(fast->next != NULL && fast->next->next != NULL)
        {
            slow = slow -> next;
            fast = fast -> next -> next;
            
            if(slow == fast)
            {
                flag = true;
                break;
            }
        }
        if(!flag || fast == NULL)
            return NULL;
            
        if(!flag || fast == NULL)
            return NULL;
            
        slow = head;
        while(slow != fast)
        {
            slow = slow -> next;
            fast = fast -> next;
        }
        
        return slow;
    }
};
